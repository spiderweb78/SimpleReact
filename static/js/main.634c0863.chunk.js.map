{"version":3,"sources":["components/navbar.js","components/home.js","components/about.js","components/contact.js","hoc/Rainbow.js","components/post.js","action/postaction.js","App.js","serviceWorker.js","reducers/rootreducer.js","index.js"],"names":["withRouter","props","className","to","Home","console","log","this","posts","postlist","length","map","post","key","id","title","body","Component","connect","state","ownProps","About","Rainbow","WrappedComponent","rclass","Math","floor","random","Post","handleclick","deletePost","history","push","onClick","match","params","post_id","find","dispatch","type","App","exact","path","component","Contact","Boolean","window","location","hostname","initState","rootReducer","action","npost","filter","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.634c0863.chunk.js","sourcesContent":["import React from 'react';\r\nimport {Link, NavLink,withRouter} from 'react-router-dom';\r\n\r\nconst Navbar=(props)=>{\r\n    // setTimeout(() => {\r\n    //     props.history.push('/about');\r\n    // }, 1000);\r\n    return(\r\n        <nav className='nav-wrapper red'>\r\n            <div className='container'>\r\n                <a className='brand-logo'>logo</a>\r\n                <ul className='right'>\r\n                    {/* <li><a href='/'>Home</a></li>\r\n                    <li><a href='/about'>About</a></li>\r\n                    <li><a href='/contact'>Contact</a></li> */}\r\n                    <li><NavLink to='/'>Home</NavLink></li>\r\n                    <li><Link to='/about'>About</Link></li>\r\n                    <li><Link to='/contact'>Contact</Link></li>\r\n                </ul>\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\nexport default withRouter(Navbar);","import React, { Component } from 'react'\r\nimport {Link} from 'react-router-dom';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\n\r\nclass Home extends Component{\r\n    // componentDidMount(){\r\n    //     axios.get('https://jsonplaceholder.typicode.com/todos/')\r\n    //     .then(res=>{\r\n    //         console.log(res);\r\n    //         this.setState({\r\n    //             posts: res.data.slice(0,10)\r\n    //         });\r\n    //     });\r\n    // }\r\n    render(){\r\n        console.log(this.props);\r\n        const {posts} = this.props;\r\n        const postlist = posts.length ? (\r\n            posts.map(post=>{\r\n                return(\r\n                    <div className='post card' key={post.id}>\r\n                        <div className='card-content'>\r\n                            <Link to={'/'+post.id}><span className='card-title>'>{post.title}</span></Link>\r\n                            <p>{post.body}</p>\r\n                        </div>\r\n                    </div>\r\n                )\r\n            })\r\n        ):(\r\n            <div className='center'>No posts yet.</div>\r\n        )\r\n        return(\r\n            <div className='container'>\r\n                <h4 className='center'>Home</h4>\r\n                {postlist}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps=(state,ownProps)=>{\r\n    return{\r\n        posts: state.posts\r\n    }\r\n}\r\nexport default connect(mapStateToProps)(Home);","import React from 'react'\r\n\r\nconst About=()=>{\r\n    return(\r\n        <div className='container'>\r\n            <h4 className='center'>About</h4>\r\n            <p>Lorem</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default About;","import React from 'react'\r\nimport Rainbow from '../hoc/Rainbow';\r\n\r\nconst Contact=(props)=>{\r\n    // console.log(props);\r\n    // setTimeout(()=>{\r\n    //     props.history.push('/about');\r\n    // },2000);\r\n    return(\r\n        <div className='container'>\r\n            <h4 className='center'>Contact</h4>\r\n            <p>Lorem contact</p>\r\n        </div>\r\n    )\r\n}\r\nexport default Rainbow(Contact);","import React from 'react';\r\nconst Rainbow = (WrappedComponent) => {\r\n    const color = ['red', 'green', 'blue', 'black', 'yellow', 'pink'];\r\n    const randc = color[Math.floor(Math.random() * 5)];\r\n    const rclass = randc + '-text';\r\n\r\n    return (props)=>{\r\n        return(\r\n            <div className={rclass}>\r\n                <WrappedComponent {...props} />\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Rainbow;","import React, { Component } from 'react';\r\nimport axios from 'axios';\r\nimport {connect} from 'react-redux';\r\nimport {deletePost} from '../action/postaction';\r\nclass Post extends Component{\r\n    // state={\r\n    //     id:null,\r\n    //     post:null,\r\n    // }\r\n    // componentDidMount(){\r\n    //     let id=this.props.match.params.post_id;\r\n    //     axios.get('https://jsonplaceholder.typicode.com/posts/'+{id})\r\n    //     .then(res=>{\r\n    //         this.setState({\r\n    //             id:id,\r\n    //             post:res.title\r\n    //         });\r\n    //     });\r\n        \r\n    // }\r\n    handleclick=()=>{\r\n        this.props.deletePost(this.props.post.id);\r\n        this.props.history.push('/');\r\n    }\r\n    render(){\r\n        const post=this.props.post?(\r\n            <div className='post'>\r\n                <h4 className='center'>{this.props.post.title}</h4>\r\n                <p>{this.props.post.body}</p>\r\n                <button className='btn grey'onClick={this.handleclick}>Delete</button>\r\n            </div>\r\n        ):(\r\n            <div className='center'>loading post....</div>\r\n        );\r\n        return(\r\n            <div className='container'>\r\n                {post}\r\n            </div>\r\n        )\r\n    }\r\n}\r\nconst mapStateToProps=(state,ownProps)=>{\r\n    console.log(ownProps);\r\n    let id=ownProps.match.params.post_id;\r\n    return{\r\n        post: state.posts.find(post=>post.id===id)\r\n    }\r\n}\r\nconst matchDispatchToProps=(dispatch)=>{\r\n    return{\r\n        deletePost: (id)=>{dispatch(deletePost(id))}\r\n    }\r\n}\r\n\r\nexport default connect(mapStateToProps,matchDispatchToProps)(Post);","export const deletePost=(id)=>{\r\n    return{\r\n        type:'DELETE_POST',\r\n        id\r\n    }\r\n}","import React, { Component } from 'react';\nimport { BrowserRouter, Route,Switch } from 'react-router-dom';\n\nimport Navbar from './components/navbar';\nimport Home from './components/home';\nimport About from './components/about';\nimport Contact from './components/contact';\nimport Post from './components/post';\n\nclass App extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <div className=\"App\">\n          <Navbar />\n          <Switch>\n            <Route exact path='/' component={Home} />\n            <Route path='/contact' component={Contact} />\n            <Route path='/about' component={About} />\n            <Route path='/:post_id' component={Post} />\n          </Switch>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const initState={\r\n    posts: [\r\n        {id:'1',title:'lorem1',body:' Lorem ipsum, dolor sit amet consectetur adipisicing elit. Impedit, odio recusandae dicta distinctio a saepe quas corrupti quod animi, est sed vitae cupiditate ea ipsum, perspiciatis eos rem voluptatibus aspernatur.'},\r\n        {id:'2',title:'lorem2',body:' Lorem ipsum, dolor sit amet consectetur adipisicing elit. Impedit, odio recusandae dicta distinctio a saepe quas corrupti quod animi, est sed vitae cupiditate ea ipsum, perspiciatis eos rem voluptatibus aspernatur.'},\r\n        {id:'3',title:'lorem3',body:' Lorem ipsum, dolor sit amet consectetur adipisicing elit. Impedit, odio recusandae dicta distinctio a saepe quas corrupti quod animi, est sed vitae cupiditate ea ipsum, perspiciatis eos rem voluptatibus aspernatur.'}\r\n    ]\r\n}\r\nconst rootReducer=(state=initState,action)=>{\r\n    if(action.type==\"DELETE_POST\"){\r\n        let npost=state.posts.filter(post=>{\r\n            return action.id !== post.id;\r\n        });\r\n        return{\r\n            ...state,\r\n            posts: npost\r\n        }\r\n    }\r\n    return state;\r\n}\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {createStore} from 'redux';\nimport {Provider} from 'react-redux';\nimport rootReducer from './reducers/rootreducer';\n\nconst store=createStore(rootReducer);\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}